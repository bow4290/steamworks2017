// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4290.TesterBot.subsystems;

import org.usfirst.frc4290.TesterBot.RobotMap;

import org.usfirst.frc4290.TesterBot.commands.*;

import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 
 */
public class DriveTrain extends Subsystem {
	//TODO
	private final SpeedController driveRightOneMotor = RobotMap.driveTraindriveRightOneMotor;
    private final SpeedController driveRightTwoMotor = RobotMap.driveTraindriveRightTwoMotor;
    private final SpeedController driveLeftOneMotor = RobotMap.driveTraindriveLeftOneMotor;
    private final SpeedController driveLeftTwoMotor = RobotMap.driveTraindriveLeftTwoMotor;
    private final RobotDrive robotDrive4 = RobotMap.driveTrainRobotDrive4;
    
    
    
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController driveRightMotor = RobotMap.driveTraindriveRightMotor;
    private final SpeedController driveLeftMotor = RobotMap.driveTraindriveLeftMotor;
    private final RobotDrive robotDrive2 = RobotMap.driveTrainRobotDrive2;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public double speedMultiplier;
    private double powerCurve;
    private final double speedChange = 0.1;
    
    public DriveTrain() {
    	SmartDashboard.putNumber("init speed", speedMultiplier);

//    	speedMultiplier = 0.75;
    	powerCurve = 3;
    	
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    		setDefaultCommand(new driveWithJoySticks());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    //TODO
    public void takeJoystickInputs(Joystick left, Joystick right){
    	robotDrive4.arcadeDrive(Math.pow(right.getY(), powerCurve)*speedMultiplier*-1, right.getX()*-.85);//.arcadeDrive(right);
    }
    
    
    
    
    
    
    
    
    public void speedUpDrive(){
    	if (speedMultiplier < 1.0){
    		speedMultiplier += speedChange;
    		SmartDashboard.putBoolean("Speed UP", true);
    	}
    	updateCurve();
    }
    
    public void speedDownDrive(){
    	if (speedMultiplier > 0.55){
    		speedMultiplier -= speedChange;
    		SmartDashboard.putBoolean("Speed Down", true);
    	}
    	updateCurve();
    	
    }
    public void highSpeed(){
    	speedMultiplier = 1.0;
    	updateCurve();
    }
    public void midSpeed(){
    	speedMultiplier = 0.75;
    	updateCurve();
    }
    public void lowSpeed(){
    	speedMultiplier = 0.65;
    	updateCurve();
    }
    
    public void updateCurve(){
    	
    	if (speedMultiplier >= 0.75){
    		powerCurve = 3;
    	}
    	
    	if(speedMultiplier < 0.75){
    		powerCurve = 1;
    	}
    	
//    	SmartDashboard.putNumber("Multiplier", speedMultiplier);
    	SmartDashboard.putNumber("Power", powerCurve);
    }
    
    
    public void driveForward(){
    	SmartDashboard.putNumber("forward speed", speedMultiplier);
    	robotDrive4.tankDrive(speedMultiplier, speedMultiplier);
    }
    
    public void driveBackwards(){
    	robotDrive4.tankDrive(-speedMultiplier, -speedMultiplier*1.07);
    }
    public void driveRightTurn(){
    	robotDrive4.tankDrive(1, -1);
    }
    public void driveLeftTurn(){
    	robotDrive4.tankDrive(-1, 1);
    }
    public void driveSlowRightTurn(){
    	robotDrive4.tankDrive(0.8, -0.8);
    }
    public void driveSlowLeftTurn(){
    	robotDrive4.tankDrive(-0.8, 0.8);
    }
    
    
    public void swingRight() {
    	robotDrive4.tankDrive(0.85, 0.55);
    }
    public void swingLeft() {
    	robotDrive4.tankDrive(0.55, 0.85);
    }
    public void moveForward(){
    	robotDrive4.tankDrive(0.7, 0.7);
    	
    }
    public void moveBack(){
    	robotDrive4.tankDrive(-0.7, -0.7);
    	
    }
    public void stop(){
    	robotDrive2.drive(0, 0);
    	
    }
}

